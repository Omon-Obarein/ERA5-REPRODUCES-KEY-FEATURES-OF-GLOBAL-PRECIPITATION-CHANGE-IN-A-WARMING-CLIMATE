%% to subset northern hemisphere dataset
% lat = 721x1440 matrix of latitudes
% lon = 721x1440 matrix of longitudes
% global_precipitation = 16701x1038240 

nh_mask = lats > 0; % Create a logical mask for the northern hemisphere
global_data_reshaped = single(reshape(precip, [16071, 721, 1440])); % Reshape the global data to match the spatial dimensions of lat and lon
nh_data = global_data_reshaped(:, nh_mask); % Apply the mask to subset the northern hemisphere data
nh_data_reshaped = reshape(nh_data, [16701, sum(nh_mask(:))]); % reshape the nh_data back to its original 2D shape

%% create seasonal time data
winter_time = (timedata(:, 2) == 12) | (timedata(:, 2) == 1) | (timedata(:, 2) == 2); % 
spring_time = (timedata(:, 2) == 3) | (timedata(:, 2) == 4) | (timedata(:, 2) == 5);
fall_time = (timedata(:, 2) == 9) | (timedata(:, 2) == 10) | (timedata(:, 2) == 11);
summer_time = (timedata(:, 2) == 6) | (timedata(:, 2) == 7) | (timedata(:, 2) == 8); % 

%% subset the northern hemisphere data with the seasons
summer_precip = nh_data(summer_time == 1, :); 
fall_precip = nh_data(fall_time == 1, :); 
spring_precip = nh_data(spring_time == 1, :); 
winter_precip = nh_data(winter_time == 1, :); 

%% Seasonal Extreme Precipitation (Repeat for all seasons)
summer_precip(summer_precip == 0) = NaN;
for i = 1:size(summer_precip, 2) 
p95_summer(:,i) = prctile(summer_precip(:,i),95); 
end

%% to find the number of precipiation in each season, greater than the 95th percentile in all days of the season (repeat for all seasons)
daysPerSpring = 4048 / 44; predefine the number of days in each season (assuming uniform days for simplicity: )
spr_p95 = zeros(44, 518400); predefine the matrix to store the number of precipitation in each season, greater than the 95th percentile in all days of the season
for year = 1:44
    % Get the start and end indices for the current year's spring data in A
    startIdx = (year - 1) * daysPerSpring + 1;
    endIdx = year * daysPerSpring;

    % Extract the current year's spring data for all grid points
    currentYearData = summer_precip(startIdx:endIdx, :);
    
    % Find days with precipitation greater than B for each grid point
    spr_p95(year, :) = sum(currentYearData >= p95_summer, 1);
end

%% For trends across grid points
fall_mean = mean(fall_p95, 2);
spr_mean = mean(spr_p95, 2);
summ_mean = mean(summ_p95, 2);
wint_mean = mean(wint_p95, 2);

%% save the seasonal mean days in csv
season= horzcat(wint_mean, spr_mean, summ_mean, fall_mean);
writematrix(season, 'D:\Dissertation\output\seasonal_extreme\season.csv');

######################################## LINE PLOT IS DONE IN PYTHON ####################
import pandas as pd
import matplotlib.pyplot as plt
from scipy.stats import linregress

# Load the dataset
new_file_path = "D:\Dissertation\output\seasonal_extreme\season.csv"
new_data = pd.read_csv(new_file_path)

# Clean the data by removing rows with NaN in the 'Winter' column
cleaned_data = new_data.dropna(subset=['Winter'])

# Extract relevant data
years_cleaned = cleaned_data['Year']
seasons_cleaned = ['Winter', 'Spring', 'Summer', 'Fall']

# Determine consistent Y-axis scale across all seasons
y_min = cleaned_data[seasons_cleaned].min().min()
y_max = cleaned_data[seasons_cleaned].max().max()

# Create a 2x2 subplot layout
fig, axes = plt.subplots(2, 2, figsize=(12, 10))
axes = axes.flatten()

# Plot each season with its trend line and slope value
for i, season in enumerate(seasons_cleaned):
    # Linear regression for the season's data
    slope, intercept, r_value, p_value, std_err = linregress(years_cleaned, cleaned_data[season])
    
    # Plot the season's data and trend line
    axes[i].plot(years_cleaned, cleaned_data[season], label=None)
    axes[i].plot(years_cleaned, intercept + slope * years_cleaned, linestyle='--', 
                 label=f'Slope: {slope:.4f}')
    
    # Set plot title
    axes[i].set_title(season)
    axes[i].set_ylim(y_min, y_max)

    # Adjust Y-axis labels with larger fonts for Winter and Summer
    if i in [0, 2]:  # Winter and Summer
        axes[i].set_ylabel('Mean Days', fontsize=14)
    elif i in [1, 3]:  # Remove Y-axis labels for Spring and Fall
        axes[i].set_ylabel('')

    # Adjust X-axis labels with larger fonts for Summer and Fall
    if i in [2, 3]:  # Summer and Fall
        axes[i].set_xlabel('Year', fontsize=14)
    else:  # Remove X-axis labels for Winter and Spring
        axes[i].set_xlabel('')

    # Add legend with slope values
    axes[i].legend(loc='best')

# Adjust layout with extra space between rows
plt.tight_layout(h_pad=2)

# Show the plot
plt.show()
